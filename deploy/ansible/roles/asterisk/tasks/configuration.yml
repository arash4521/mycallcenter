# Copyright (C) 2018 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
---

# Se crea el servicico de asterisk  para systemctl
- name: Creation of asterisk.service
  template: src=templates/asterisk.service dest=/etc/systemd/system/asterisk.service owner=root group=root mode=650

# Linkeo el binario a /usr/sbin
- name: Create simbolic link of asterisk binarie
  file: state=link src={{ asterisk_location }}/sbin/asterisk dest=/usr/sbin/asterisk force=true
  when: asterisk_location != ""
  become: yes
  become_method: sudo

# Se linkean los .conf de asterisk (los que estan afuera de archivos-no-enlaces) a /opt/omnileads/asterisk/etc/asterisk
- name: Config of asterisk for OML (aio)
  file: "state=link src={{ install_prefix }}ominicontacto/ominicontacto_voip/asterisk-files/conf/{{ item }} dest={{ asterisk_location }}/etc/asterisk/{{ item }} force=true owner={{ usuario }} group={{ usuario }} mode=755"
  with_items:
      - oml_extensions.conf
      - oml_extensions_sub.conf
  become: true
  become_method: sudo
  when: cluster == 0

# Se copian si es un cluster
- name: Copy of the extensions.conf files (cluster)
  copy: src=/var/tmp/ominicontacto-build/ominicontacto/ominicontacto_voip/asterisk-files/conf/{{ item }} dest={{ asterisk_location }}/etc/asterisk owner={{ usuario }} group={{ usuario }}
  with_items:
      - oml_extensions.conf
      - oml_extensions_sub.conf
  when: cluster != 0
  tags: postinstall

- name: Copy of asterisk config files
  template: "src=templates/conf/{{ item }} dest={{ asterisk_location }}/etc/asterisk/{{ item }} owner={{ usuario }} group={{ usuario }} mode=755"
  with_items:
      - amd.conf
      - chan_dahdi.conf
      - extconfig.conf
      - extensions.conf
      - features.conf
      - func_odbc.conf
      - http.conf
      - indications.conf
      - logger.conf
      - manager.conf
      - modules.conf
      - musiconhold.conf
      - oml_func_odbc.conf
      - oml_res_odbc.conf
      - oml_amd.conf
      - oml_manager.conf
      - oml_dahdi.conf
      - oml_http.conf
      - oml_sip_general.conf
      - oml_sip_nat.conf
      - queues.conf
      - res_odbc.conf
      - sip.conf
      - udptl.conf
  become: true
  become_method: sudo
  tags: [changeip']

# Los archivos-no-enlaces se copian a la a /etc/asterisk
- name: Copy of all asterisk config files
  copy: "src=templates/conf/archivos-no-enlaces/ dest={{ asterisk_location }}/etc/asterisk/ owner={{ usuario }} group={{ usuario }} mode=755"

- name: Install pyst (Asterisk manager for python) (cluster)
  pip: name=pyst2 state=present version=0.5.0
  become: true
  become_method: sudo
  when: cluster != 0

# Genero los agis desde ansible
- name: Creation of the agis omni-blackist and omni-dialednum
  template: "src=templates/agi-bin/{{ item.src }} dest={{ asterisk_location }}/var/lib/asterisk/agi-bin/{{ item.dest }} mode=755 owner={{ usuario }} group={{ usuario }}"
  with_items:
      - { src: ".config", dest: ".config" }
      - { src: "config.py.j2", dest: "config.py" }
      - { src: "utiles.py.j2", dest: "utiles.py" }
      - { src: "omni-asterisk-logout.py.j2", dest: "omni-asterisk-logout.py" }
      - { src: "omni-blacklist.py.j2", dest: "omni-blacklist.py" }
      - { src: "omni-dialednum.py.j2", dest: "omni-dialednum.py" }
      - { src: "omni-grabaciones.py.j2", dest: "omni-grabaciones.py" }
  become: yes
  become_method: sudo
  tags: postinstall

- name: Creation of agis-errors.log file
  file: path={{ asterisk_location }}/var/log/asterisk/agis-errors.log state=touch mode=755 owner={{ usuario }} group={{ usuario }}
  tags: postinstall
  
# Aca creo la carpeta parselog
- name: Create /usr/local/parselog
  file: dest=/usr/local/parselog state=directory mode=0755 owner={{ usuario }} group={{ usuario }}
  become: yes
  become_method: sudo

# Creo el script de conversion lo deje en parselog por convencion heredada de asternic
- name: Link the conversor.sh file
  template: src=templates/conversor.sh dest=/usr/local/parselog/conversor.sh owner={{ usuario }} group={{ usuario }} mode=755
  when: asterisk_location != ""

# Se añade el cron de omnileads
- name: Copy the cron-omnileads file
  template: src=templates/cron-omnileads dest=/etc/cron.d/cron-omnileads owner=root group=root
  when: asterisk_location != ""

# Para debian toca linkear esta libreria a a /usr/lib/postgresql/9.6 es una libreria de unixODBC
- name: Link odbc librarie to postgresql libs
  file: state=link src=/usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so dest=/usr/lib/postgresql/9.6/lib/psqlodbcw.so owner=root group=root mode=700
  when: ansible_os_family == "Debian"
  become: true
  become_method: sudo

# Creo el archivo odbcinst.ini desde ansible
- name: Creation of odbcinst.ini file
  template: src=templates/etc/{{ item }} dest=/etc/ owner=root group=root mode=644
  with_items:
    - odbcinst.ini
    - odbc.ini
  become: true
  become_method: sudo

# Creo los directorios que tendran los sonidos de agentes
- name: Make of the sounds dirs
  file: state=directory path={{ asterisk_location }}/var/lib/asterisk/sounds/{{ item }} owner={{ usuario }} group={{ usuario }} mode=755
  with_items:
    - es
    - en
    - oml

# Untareo los sonidos de agentes, que vienen desde el repo
- name: Untar the sounds for agents
  unarchive: "src=/var/tmp/ominicontacto-build/ominicontacto/ominicontacto_voip/asterisk-files/sounds/{{ item.source }} dest={{ asterisk_location }}/var/lib/asterisk/sounds/{{ item.dest }}"
  with_items:
    - { source: "es-oml.tgz", dest: "es" }
    - { source: "en-oml.tgz", dest: "en" }

# Permiso de usuario a la carpeta de asterisk
- name: Set up permissions of asterisk
  file: state=directory path={{ asterisk_location }} owner={{ usuario }} group={{ usuario }} recurse=yes
  when: asterisk_location != ""
  become: yes
  become_method: sudo

# Borro el archivo de inicio de asterisk en el init.d
- name: Erase default asterisk init.d service
  file: state=absent path=/etc/init.d/asterisk
  become: yes
  become_method: sudo

# Habilito e inicio asterisk
- name: Start and enable asterisk
  systemd: name=asterisk state=restarted enabled=yes daemon_reload=yes
  become: true
  become_method: sudo

# Un reload de config no viene mal, no alarmarse si falla
- name: Reload of asterisk config
  shell: "asterisk -rx 'module reload'"
  become: yes
  tags: ['postinstall', 'changeip']
  become_method: sudo
  ignore_errors: yes

# Añado un archivo para el logrotate
- name: Configuration of logrotate
  template: src=templates/omnileads dest=/etc/logrotate.d/omnileads owner=root group=root mode=644
