# coding: utf-8
# Generated by Selenium IDE

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from pyvirtualdisplay import Display
from selenium.webdriver.chrome.options import Options
from integracion_metodos import (login, ADMIN_USERNAME, ADMIN_PASSWORD, USER)

import unittest
import os
import socket
import uuid

from time import sleep
from datetime import date, timedelta

TESTS_INTEGRACION_HOSTNAME = os.getenv('TESTS_INTEGRACION_HOSTNAME')
if not TESTS_INTEGRACION_HOSTNAME:
    TESTS_INTEGRACION_HOSTNAME = socket.gethostname()

TESTS_INTEGRACION = os.getenv('TESTS_INTEGRACION')

AGENTE = 'agente1'  # 'agente' + uuid.uuid4().hex[:5]
GRUPO = 'Gtest'  # 'grupo' + uuid.uuid4().hex[:5]
USUARIO = 'ftsup1'  # 'usuario' + uuid.uuid4().hex[:5]
ENTRANTE = 'IN1'  # 'IN' + uuid.uuid4().hex[:5]
MANUAL = 'MAN1'  # 'MAN' + uuid.uuid4().hex[:5]
PREVIEW = 'PRW1'  # 'PRW' + uuid.uuid4().hex[:5]
DIALER = 'DIAL1'  # 'DIAL' + uuid.uuid4().hex[:5]


@unittest.skipIf(TESTS_INTEGRACION != 'True', 'Ignorando tests de integracion')
class TestSettingInicialSanitySystem(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        # super(IntegrationTests, cls).setUpClass()
        cls.setUp()
        login(cls.driver, ADMIN_USERNAME, ADMIN_PASSWORD)
        csv_prw = "/home/{0}/ominicontacto/test/PREVIEW-SEL-TS-PRW1.csv".format(USER)
        csv_dial = "/home/{0}/ominicontacto/test/DIALER-SEL-TS-DIAL1.csv".format(USER)
        cls.crear_bd(PREVIEW, csv_prw)
        cls.presettingCreacionCampanias()
        cls.crear_bd(DIALER, csv_dial)
        cls.tearDown()

    @classmethod
    def tearDownClass(cls):
        pass

    @classmethod
    def setUp(self):
        chrome_options = Options()
        chrome_options.add_argument('--use-fake-ui-for-media-stream')
        chrome_options.add_argument('--use-fake-device-for-media-stream')
        chrome_options.add_experimental_option('prefs', {'intl.accept_languages': 'es'})
        chrome_options.add_argument('--ignore-certificate-errors')
        # si se pone visible=1 se muestra el browser en medio de los tests
        self.display = Display(visible=0, size=(1440, 873))
        self.display.start()
        self.driver = webdriver.Chrome(options=chrome_options)
        self.vars = {}

    @classmethod
    def tearDown(self):
        self.driver.close()
        self.driver.quit()
        self.display.stop()

    @classmethod
    def crear_bd(self, BD, csv_path):
        self.driver.find_element(By.LINK_TEXT, "Contactos").click()
        sleep(1)
        self.driver.find_element(By.LINK_TEXT, "Nueva base de datos de contactos").click()
        self.driver.find_element(By.ID, 'id_nombre').send_keys(BD)
        self.driver.find_element(By.ID, 'id_archivo_importacion').send_keys(csv_path)
        self.driver.find_element(By.XPATH, "//button[@type='submit']").click()
        sleep(1)
        self.driver.find_element(By.XPATH, '//label/input[@value = "telefono"]').click()
        self.driver.find_element(By.XPATH, "//button[@type='submit']").click()
        sleep(1)

    @classmethod
    def presettingCreacionCampanias(self):
        # Creacion de Grupo
        self.driver.find_element(By.LINK_TEXT, "Usuarios y grupos").click()
        sleep(1)
        self.driver.find_element(By.LINK_TEXT, "Nuevo Grupo de agentes").click()
        self.driver.find_element(By.ID, "id_nombre").click()
        self.driver.find_element(By.ID, "id_nombre").send_keys(GRUPO)
        self.driver.find_element(By.ID, "id_auto_unpause").send_keys("0")
        self.driver.find_element(By.ID, "id_auto_attend_inbound").click()
        self.driver.find_element(By.ID, "id_auto_attend_dialer").click()
        self.driver.find_element(By.ID, "id_registrar").click()
        sleep(2)
        # Creacion de Agente
        self.driver.find_element(By.LINK_TEXT, "Lista de usuarios").click()
        sleep(1)
        self.driver.find_element(By.LINK_TEXT, "Nuevo usuario").click()
        self.driver.find_element(By.ID, "id_0-username").send_keys(AGENTE)
        self.driver.find_element(By.ID, "id_0-first_name").send_keys("{0} nombre".format(AGENTE))
        self.driver.find_element(By.ID, "id_0-last_name").send_keys("{0} apellido".format(AGENTE))
        self.driver.find_element(By.ID, "id_0-email").send_keys("test@test.com")
        self.driver.find_element(By.ID, "id_0-rol").click()
        dropdown = self.driver.find_element(By.ID, "id_0-rol")
        dropdown.find_element(By.XPATH, "//option[. = 'Agente']").click()
        self.driver.find_element(By.ID, "id_0-password1").click()
        self.driver.find_element(By.ID, "id_0-password1").send_keys("098098ZZZ")
        self.driver.find_element(By.ID, "id_0-password2").send_keys("098098ZZZ")
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
        self.driver.find_element(By.ID, "id_1-grupo").click()
        dropdown = self.driver.find_element(By.ID, "id_1-grupo")
        dropdown.find_element(By.XPATH, "//option[. = \'{0}\']".format(GRUPO)).click()
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
        sleep(2)
        # Creacion de Usuario Supervisor
        self.driver.find_element(By.LINK_TEXT, "Nuevo usuario").click()
        self.driver.find_element(By.ID, "id_0-username").send_keys(USUARIO)
        self.driver.find_element(By.ID, "id_0-first_name").send_keys("{0} nombre".format(USUARIO))
        self.driver.find_element(By.ID, "id_0-last_name").send_keys("{0} apellido".format(USUARIO))
        self.driver.find_element(By.ID, "id_0-email").send_keys("test@test.com")
        self.driver.find_element(By.ID, "id_0-rol").click()
        dropdown = self.driver.find_element(By.ID, "id_0-rol")
        dropdown.find_element(By.XPATH, "//option[. = 'Supervisor']").click()
        self.driver.find_element(By.ID, "id_0-password1").click()
        self.driver.find_element(By.ID, "id_0-password1").send_keys("098098ZZZ")
        self.driver.find_element(By.ID, "id_0-password2").send_keys("098098ZZZ")
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
        sleep(2)
        # Creacion de Pausa Coaching
        self.driver.find_element(By.LINK_TEXT, "Pausas").click()
        sleep(1)
        self.driver.find_element(By.LINK_TEXT, "Nueva pausa").click()
        self.driver.find_element(By.ID, "id_nombre").click()
        self.driver.find_element(By.ID, "id_nombre").send_keys("Coaching")
        self.driver.find_element(By.ID, "id_registrar").click()
        sleep(1)
        # Creacion de Pausa Break
        self.driver.find_element(By.LINK_TEXT, "Nueva pausa").click()
        self.driver.find_element(By.ID, "id_nombre").send_keys("Break")
        self.driver.find_element(By.ID, "id_tipo").click()
        dropdown = self.driver.find_element(By.ID, "id_tipo")
        dropdown.find_element(By.XPATH, "//option[. = 'Recreativa']").click()
        self.driver.find_element(By.ID, "id_registrar").click()
        sleep(2)
        # Creacion de Formularios form Pre
        self.driver.find_element(By.LINK_TEXT, "Campa√±as".decode('utf-8')).click()
        sleep(1)
        self.driver.find_element(By.LINK_TEXT, "Formularios").click()
        sleep(1)
        self.driver.find_element(By.LINK_TEXT, "Nuevo formulario").click()
        self.driver.find_element(By.ID, "id_nombre").click()
        self.driver.find_element(By.ID, "id_nombre").send_keys("FPre")
        self.driver.find_element(By.ID, "id_descripcion").click()
        self.driver.find_element(By.ID, "id_descripcion").send_keys("Form Pre")
        self.driver.find_element(By.ID, "id_guardar").click()
        self.driver.find_element(By.ID, "id_tipo").click()
        dropdown = self.driver.find_element(By.ID, "id_tipo")
        dropdown.find_element(By.XPATH, "//option[. = 'Texto']").click()
        self.driver.find_element(By.ID, "id_nombre_campo").click()
        self.driver.find_element(By.ID, "id_nombre_campo").send_keys("Texto")
        self.driver.find_element(By.ID, "id_guardar").click()
        self.driver.find_element(By.ID, "id_tipo").click()
        dropdown = self.driver.find_element(By.ID, "id_tipo")
        dropdown.find_element(By.XPATH, "//option[. = 'Fecha']").click()
        self.driver.find_element(By.ID, "id_nombre_campo").click()
        self.driver.find_element(By.ID, "id_nombre_campo").send_keys("datetime")
        self.driver.find_element(By.ID, "id_guardar").click()
        self.driver.find_element(By.ID, "id_tipo").click()
        dropdown = self.driver.find_element(By.ID, "id_tipo")
        dropdown.find_element(By.XPATH, "//option[. = 'Lista']").click()
        self.driver.find_element(By.ID, "id_nombre_campo").send_keys("Lista")
        self.driver.find_element(By.ID, "id_value_item").send_keys("a")
        self.driver.find_element(By.ID, "agregar_lista").click()
        self.driver.find_element(By.ID, "id_value_item").send_keys("b")
        self.driver.find_element(By.ID, "agregar_lista").click()
        self.driver.find_element(By.ID, "id_value_item").send_keys("c")
        self.driver.find_element(By.ID, "agregar_lista").click()
        self.driver.find_element(By.ID, "id_value_item").send_keys("d")
        self.driver.find_element(By.ID, "agregar_lista").click()
        self.driver.find_element(By.ID, "id_guardar").click()
        self.driver.find_element(By.ID, "id_tipo").click()
        dropdown = self.driver.find_element(By.ID, "id_tipo")
        dropdown.find_element(By.XPATH, "//option[. = 'Caja de Texto de Area']").click()
        self.driver.find_element(By.ID, "id_nombre_campo").send_keys("Box")
        self.driver.find_element(By.ID, "id_guardar").click()
        self.driver.find_element(By.LINK_TEXT, "Continuar").click()
        self.driver.find_element(By.ID, "finalizar").click()
        sleep(2)
        self.driver.find_element(By.LINK_TEXT, "SI").click()
        sleep(1)
        # Creacion de Calificaciones sell, no sell y no interesado
        self.driver.find_element(By.LINK_TEXT, "Calificaciones").click()
        sleep(1)
        self.driver.find_element(By.LINK_TEXT, "Nueva Calificaci√≥n".decode('utf-8')).click()
        sleep(1)
        self.driver.find_element(By.ID, "id_nombre").send_keys("Sell")
        self.driver.find_element(By.CSS_SELECTOR, ".wrapper-content").click()
        self.driver.find_element(By.ID, "id_registrar").click()
        sleep(1)
        self.driver.find_element(By.LINK_TEXT, "Nueva Calificaci√≥n".decode('utf-8')).click()
        self.driver.find_element(By.ID, "id_nombre").send_keys("No Sell")
        self.driver.find_element(By.ID, "id_registrar").click()
        sleep(1)
        self.driver.find_element(By.LINK_TEXT, "Nueva Calificaci√≥n".decode('utf-8')).click()
        self.driver.find_element(By.ID, "id_nombre").send_keys("No Interesado")
        self.driver.find_element(By.ID, "id_registrar").click()
        sleep(1)

    def test_creacion_campana_entrante(self):
        try:
            login(self.driver, ADMIN_USERNAME, ADMIN_PASSWORD)
            # Creacion de Campana Entrante
            self.driver.find_element(By.LINK_TEXT, "Campa√±as".decode('utf-8')).click()
            sleep(2)
            self.driver.find_element(By.LINK_TEXT, "Campa√±as entrantes".decode('utf-8')).click()
            sleep(2)
            self.driver.find_element(By.LINK_TEXT, "Nueva campa√±a".decode('utf-8')).click()
            self.driver.find_element(By.ID, "id_0-nombre").send_keys(ENTRANTE)
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard Datos basicos
            self.driver.find_element(By.ID, "id_1-maxlen").send_keys("100")
            self.driver.find_element(By.ID, "id_1-auto_grabacion").click()
            self.driver.find_element(By.ID, "id_1-weight").send_keys("0")
            self.driver.find_element(By.CSS_SELECTOR, ".form-row:nth-child(3)").click()
            self.driver.find_element(By.ID, "id_1-strategy").click()
            dropdown = self.driver.find_element(By.ID, "id_1-strategy")
            dropdown.find_element(By.XPATH, "//option[. = 'Rremory']").click()
            self.driver.find_element(By.ID, "id_1-wait").send_keys("60")
            self.driver.find_element(By.CSS_SELECTOR, ".form-row:nth-child(4)").click()
            self.driver.find_element(By.ID, "id_1-wait").send_keys("30")
            self.driver.find_element(By.CSS_SELECTOR, ".form-row:nth-child(4)").click()
            self.driver.find_element(By.ID, "id_1-servicelevel").send_keys("90")
            self.driver.find_element(By.ID, "id_1-timeout").send_keys("10")
            self.driver.find_element(By.ID, "id_1-retry").send_keys("15")
            self.driver.find_element(By.CSS_SELECTOR, ".row > .col-md-6:nth-child(2)").click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            # wizard opcion de calificacion
            # agregar calificacion Sell con form FPre
            self.driver.find_element(By.XPATH, "//tr[1]//select//option[. = 'Sell']").click()
            self.driver.find_element(By.XPATH, "//tr[1]//td[3]//select//option[1]").click()
            self.driver.find_element(By.XPATH, "//tr[1]//td[4]//select//option[. = 'FPre']").click()
            # agregar calificacion No Sell
            self.driver.find_element(By.LINK_TEXT, "Agregar campo").click()
            self.driver.find_element(By.XPATH, "//tr[2]//select//option[. = 'No Sell']").click()
            # agregar calificacion No interesado
            self.driver.find_element(By.LINK_TEXT, "Agregar campo").click()
            self.driver.find_element(By.XPATH, "//tr[3]//select//option[. = 'No Interesado']"
                                     ).click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard agregar supervisores
            self.driver.find_element(By.ID, "id_4-supervisors_1").click()
            self.driver.find_element(By.ID, "id_4-supervisors_0").click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard agregar agentes
            agent_xpath = "//select//option[text()='{0} nombre {0} apellido']"
            self.driver.find_element(By.XPATH, agent_xpath.format(AGENTE)).click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            self.assertTrue(self.driver.find_elements(By.LINK_TEXT, ENTRANTE))
            print('--Se pudo crear una campana entrante.--')
        except Exception as e:
            print('--ERROR: No se pudo crear una campana entrante.--\n{0}'.format(e))
            raise e

    def test_creacionCampaniaManual(self):
        try:
            login(self.driver, ADMIN_USERNAME, ADMIN_PASSWORD)
            # Creacion campana manual
            self.driver.find_element(By.LINK_TEXT, "Campa√±as".decode('utf-8')).click()
            sleep(2)
            self.driver.find_element(By.LINK_TEXT, "Campa√±as manuales".decode('utf-8')).click()
            self.driver.find_element(By.CSS_SELECTOR, "#menuCampaignManual > li:nth-child(2) > a"
                                     ).click()
            self.driver.find_element(By.ID, "id_0-nombre").send_keys(MANUAL)
            self.driver.find_element(By.ID, "id_0-auto_grabacion").click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard opciones de calificacion
            # agregar calificacion Sell con form FPre
            self.driver.find_element(By.XPATH, "//tr[1]//select//option[. = 'Sell']").click()
            self.driver.find_element(By.XPATH, "//tr[1]//td[3]//select//option[1]").click()
            self.driver.find_element(By.XPATH, "//tr[1]//td[4]//select//option[. = 'FPre']").click()
            # agregar calificacion No Sell
            self.driver.find_element(By.LINK_TEXT, "Agregar campo").click()
            self.driver.find_element(By.XPATH, "//tr[2]//select//option[. = 'No Sell']").click()
            # agregar calificacion No interesado
            self.driver.find_element(By.LINK_TEXT, "Agregar campo").click()
            self.driver.find_element(By.XPATH, "//tr[3]//select//option[. = 'No Interesado']"
                                     ).click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard dar permisos a supervisores
            self.driver.find_element(By.ID, "id_3-supervisors_1").click()
            self.driver.find_element(By.ID, "id_3-supervisors_0").click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard adicionar agentes
            agent_xpath = "//select//option[text()='{0} nombre {0} apellido']"
            self.driver.find_element(By.XPATH, agent_xpath.format(AGENTE)).click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            self.assertTrue(self.driver.find_elements(By.LINK_TEXT, MANUAL))
            print('--Se pudo crear una campana manual.--')
        except Exception as e:
            print('--ERROR: No se pudo crear una campana manual.--\n{0}'.format(e))
            raise e

    def test_creacionCampanaDialer(self):
        try:
            login(self.driver, ADMIN_USERNAME, ADMIN_PASSWORD)
            # Creacion de campana dialer
            self.driver.find_element(By.LINK_TEXT, "Campa√±as".decode('utf-8')).click()
            sleep(2)
            self.driver.find_element(By.LINK_TEXT, "Campa√±as dialer".decode('utf-8')).click()
            sleep(2)
            self.driver.find_element(By.LINK_TEXT, "Nueva campa√±a".decode('utf-8')).click()
            self.driver.find_element(By.ID, "id_0-nombre").send_keys(DIALER)
            self.driver.find_element(By.ID, "id_0-bd_contacto").click()
            dropdown = self.driver.find_element(By.ID, "id_0-bd_contacto")
            dropdown.find_element(By.XPATH, "//option[. = '{0}: (7 contactos)']".format(DIALER)
                                  ).click()
            today = date.today()
            fecha_inicio = today.strftime('%d/%m/%Y')
            fecha_fin = (today + timedelta(days=270)).strftime('%d/%m/%Y')
            self.driver.find_element(By.ID, "id_fecha_inicio").send_keys(fecha_inicio)
            self.driver.find_element(By.ID, "id_fecha_fin").send_keys(fecha_fin)
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard cola
            self.driver.find_element(By.ID, "id_1-maxlen").send_keys("100")
            self.driver.find_element(By.ID, "id_1-servicelevel").send_keys("90")
            dropdown = self.driver.find_element(By.ID, "id_1-strategy")
            dropdown.find_element(By.XPATH, "//option[. = 'Rremory']").click()
            self.driver.find_element(By.ID, "id_1-weight").send_keys("0")
            self.driver.find_element(By.ID, "id_1-wait").send_keys("60")
            self.driver.find_element(By.ID, "id_1-auto_grabacion").click()
            self.driver.find_element(By.CSS_SELECTOR, ".form-row").click()
            self.driver.find_element(By.ID, "id_1-wait").send_keys("30")
            self.driver.find_element(By.CSS_SELECTOR, ".form-row").click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard opcion calificacion
            # agregar calificacion Sell con form FPre
            self.driver.find_element(By.XPATH, "//tr[1]//select//option[. = 'Sell']").click()
            self.driver.find_element(By.XPATH, "//tr[1]//td[3]//select//option[1]").click()
            self.driver.find_element(By.XPATH, "//tr[1]//td[4]//select//option[. = 'FPre']").click()
            # agregar calificacion No Sell
            self.driver.find_element(By.LINK_TEXT, "Agregar campo").click()
            self.driver.find_element(By.XPATH, "//tr[2]//select//option[. = 'No Sell']").click()
            # agregar calificacion No interesado
            self.driver.find_element(By.LINK_TEXT, "Agregar campo").click()
            self.driver.find_element(By.XPATH, "//tr[3]//select//option[. = 'No Interesado']"
                                     ).click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard actuacion
            self.driver.find_element(By.ID, "id_4-domingo").click()
            self.driver.find_element(By.ID, "id_4-lunes").click()
            self.driver.find_element(By.ID, "id_4-martes").click()
            self.driver.find_element(By.ID, "id_4-miercoles").click()
            self.driver.find_element(By.ID, "id_4-jueves").click()
            self.driver.find_element(By.ID, "id_4-viernes").click()
            self.driver.find_element(By.ID, "id_4-sabado").click()
            self.driver.find_element(By.ID, "id_hora_desde").click()
            self.driver.find_element(By.ID, "id_hora_desde").send_keys(Keys.DELETE)
            self.driver.find_element(By.ID, "id_hora_desde").send_keys('9:00')
            self.driver.find_element(By.ID, "id_hora_hasta").click()
            self.driver.find_element(By.ID, "id_hora_hasta").send_keys(Keys.DELETE)
            self.driver.find_element(By.ID, "id_hora_hasta").send_keys('23:00')
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard reglas incidencias
            self.driver.find_element(By.XPATH, "//tbody//tr[1]//select//option[. = 'Ocupado']"
                                     ).click()
            self.driver.find_element(By.XPATH, "//tbody//tr[1]//td[2]//input").send_keys('20')
            self.driver.find_element(By.XPATH, "//tbody//tr[1]//td[3]//input").send_keys('2')
            self.driver.find_element(By.LINK_TEXT, "Agregar regla").click()
            self.driver.find_element(By.XPATH, "//tbody//tr[2]//select//option[. = 'Contestador']"
                                     ).click()
            self.driver.find_element(By.XPATH, "//tbody//tr[2]//td[2]//input").send_keys('30')
            self.driver.find_element(By.XPATH, "//tbody//tr[2]//td[3]//input").send_keys('2')
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard dar permisos a supervisores
            self.driver.find_element(By.ID, "id_6-supervisors_1").click()
            self.driver.find_element(By.ID, "id_6-supervisors_0").click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard adicionar agentes
            agente_xpath = "//tbody//tr[1]//select//option[. = '{0} nombre {0} apellido']"
            self.driver.find_element(By.XPATH, agente_xpath.format(AGENTE)).click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(3)
            self.driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')
            self.assertTrue(self.driver.find_elements(By.XPATH, "//tr[@id='{0}']".format(DIALER)))
            print('--Se pudo crear una campana dialer.--')
        except Exception as e:
            print('--ERROR: No se pudo crear una campana dialer.--\n{0}'.format(e))
            raise e

    def test_creacionCampaniaPreview(self):
        try:
            login(self.driver, ADMIN_USERNAME, ADMIN_PASSWORD)
            # Creacion campanas preview
            self.driver.find_element(By.LINK_TEXT, "Campa√±as".decode('utf-8')).click()
            sleep(2)
            self.driver.find_element(By.LINK_TEXT, "Campa√±as preview".decode('utf-8')).click()
            self.driver.find_element(By.CSS_SELECTOR, "#menuCampaignPreview > li:nth-child(2) > a"
                                     ).click()
            self.driver.find_element(By.ID, "id_0-nombre").send_keys(PREVIEW)
            self.driver.find_element(By.ID, "id_0-bd_contacto").click()
            dropdown = self.driver.find_element(By.ID, "id_0-bd_contacto")
            dropdown.find_element(By.XPATH, "//option[. = '{0}: (7 contactos)']".format(PREVIEW)
                                  ).click()
            self.driver.find_element(By.ID, "id_0-tiempo_desconexion").clear()
            self.driver.find_element(By.ID, "id_0-tiempo_desconexion").send_keys('2')
            self.driver.find_element(By.ID, "id_0-auto_grabacion").click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard opcion de calificacion
            # agregar calificacion Sell con form FPre
            self.driver.find_element(By.XPATH, "//tr[1]//select//option[. = 'Sell']").click()
            self.driver.find_element(By.XPATH, "//tr[1]//td[3]//select//option[1]").click()
            self.driver.find_element(By.XPATH, "//tr[1]//td[4]//select//option[. = 'FPre']").click()
            # agregar calificacion No Sell
            self.driver.find_element(By.LINK_TEXT, "Agregar campo").click()
            self.driver.find_element(By.XPATH, "//tr[2]//select//option[. = 'No Sell']").click()
            # agregar calificacion No interesado
            self.driver.find_element(By.LINK_TEXT, "Agregar campo").click()
            self.driver.find_element(By.XPATH, "//tr[3]//select//option[. = 'No Interesado']"
                                     ).click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizard dar permisos a supervisores
            self.driver.find_element(By.ID, "id_3-supervisors_0").click()
            self.driver.find_element(By.ID, "id_3-supervisors_1").click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            # wizar adicionar agentes
            agente_xpath = "//tbody//tr[1]//select//option[. = '{0} nombre {0} apellido']"
            self.driver.find_element(By.XPATH, agente_xpath.format(AGENTE)).click()
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
            sleep(1)
            self.assertTrue(self.driver.find_elements(By.LINK_TEXT, PREVIEW))
            print('--Se pudo crear una campana preview.--')
        except Exception as e:
            print('--ERROR: No se pudo crear una campana preview.--\n{0}'.format(e))
            raise e


if __name__ == '__main__':
    # para poder ejecutar los tests desde fuera del entorno
    unittest.main()
